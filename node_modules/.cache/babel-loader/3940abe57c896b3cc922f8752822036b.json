{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\React\\\\check-location\\\\src\\\\screens\\\\homscreens.js\";\nimport React, { Component } from 'react';\nimport './../App.css';\nimport Location from './Location';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class homscreens extends Component {\n  constructor(props) {\n    super(props);\n\n    this.add = event => {\n      event.preventDefault(); //console.log(this.state.location);\n      // console.log(this.state.location.length)\n\n      if (this.state.location.length < 4) {\n        const data = {\n          id: Date.now(),\n          latitude: event.target.latitude.value,\n          longitude: event.target.longitude.value\n        };\n        this.setState({\n          location: [...this.state.location, data]\n        });\n      } else {\n        alert('Error');\n      }\n    };\n\n    this.delete = id => {\n      console.log(id); // this.setState({location:[...this.state.location,data]})\n\n      this.setState({\n        location: this.state.location.filter(i => i.id !== id)\n      });\n    };\n\n    this.getLocation = async () => {\n      let promise = new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n      let pos = await promise;\n      let data = {\n        id: Date.now(),\n        longitude: pos.coords.longitude,\n        latitude: pos.coords.latitude\n      };\n      this.setState({\n        currentLocation: [data]\n      });\n    };\n\n    this.checklocation = () => {\n      console.log(this.state.location.length);\n\n      if (this.state.currentLocation === []) {\n        console.log('true');\n      } else {\n        console.log('false');\n      } // console.log(this.state.currentLocation)\n      //     if (this.state.location.length==4&&this.state.currentLocation!==[]) {\n      //     const latitude1=[];\n      //     const longitude1=[];\n      //     this.state.location\n      //     .sort(({ latitude: previousID }, { latitude: currentID }) => previousID - currentID)\n      //     .map((latitude)=>{\n      //         latitude1.push(latitude)\n      //     })\n      //     this.state.location\n      //     .sort(({ longitude: previousID }, { longitude: currentID }) => previousID - currentID)\n      //     .map((longitude)=>{\n      //         longitude1.push(longitude)\n      //     })\n      //     console.log('Current',this.state.currentLocation[0].latitude)\n      //     console.log(latitude1[0].latitude,latitude1[3].latitude,longitude1[0].longitude,longitude1[3].longitude)\n      //     if (latitude1[0].latitude>0&&latitude1[3].latitude<1000) {\n      //         alert('complete')\n      //     }else{\n      //         alert('faild')\n      //     }\n      // }else{\n      //     alert('Please add location')\n      // }\n\n    };\n\n    this.state = {\n      id: 1,\n      location: [],\n      currentLocation: []\n    };\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.location.length);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Latitude\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Longitude\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.add,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"latitude\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"longitude\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), this.state.location.map(item => /*#__PURE__*/_jsxDEV(Location, {\n        latitude: item.latitude,\n        longitude: item.longitude,\n        click: () => this.delete(item.id)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.getLocation(),\n        children: \"Getlocation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), this.state.currentLocation.map(item => /*#__PURE__*/_jsxDEV(Location, {\n        latitude: item.latitude,\n        longitude: item.longitude,\n        click: () => this.delete(item.id)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.checklocation(),\n        children: \"Check-Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/Learning/React/check-location/src/screens/homscreens.js"],"names":["React","Component","Location","homscreens","constructor","props","add","event","preventDefault","state","location","length","data","id","Date","now","latitude","target","value","longitude","setState","alert","delete","console","log","filter","i","getLocation","promise","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","pos","coords","currentLocation","checklocation","componentDidUpdate","render","map","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './../App.css';\r\nimport Location from './Location';\r\nexport default class homscreens extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id:1,\r\n            location:[],\r\n            currentLocation:[],\r\n        };\r\n    }\r\n    componentDidUpdate(){\r\n        console.log(this.state.location.length)\r\n    }\r\n    add=(event)=>{\r\n        event.preventDefault();\r\n        //console.log(this.state.location);\r\n        // console.log(this.state.location.length)\r\n        if (this.state.location.length<4) {\r\n            const data ={\r\n                id:Date.now(),\r\n                latitude:event.target.latitude.value,\r\n                longitude:event.target.longitude.value\r\n            }\r\n            this.setState({location:[...this.state.location,data]})\r\n        }else{\r\n            alert('Error')\r\n        }\r\n    }\r\n\r\n    delete=(id)=>{\r\n        console.log(id)\r\n        // this.setState({location:[...this.state.location,data]})\r\n        this.setState({location: this.state.location.filter((i)=>i.id !== id)})\r\n    }\r\n    getLocation=async()=>{\r\n        let promise = new Promise(function (resolve, reject) {\r\n            navigator.geolocation.getCurrentPosition(resolve, reject);\r\n          });\r\n          let pos = await promise;\r\n          let data ={\r\n            id:Date.now(), \r\n            longitude: pos.coords.longitude,\r\n            latitude: pos.coords.latitude\r\n          }\r\n          this.setState({currentLocation:[data]})\r\n    }\r\n    checklocation=()=>{\r\n        console.log(this.state.location.length)\r\n        if(this.state.currentLocation===[]){\r\n            console.log('true')\r\n        }else{console.log('false')}\r\n        // console.log(this.state.currentLocation)\r\n    //     if (this.state.location.length==4&&this.state.currentLocation!==[]) {\r\n    //     const latitude1=[];\r\n    //     const longitude1=[];\r\n    //     this.state.location\r\n    //     .sort(({ latitude: previousID }, { latitude: currentID }) => previousID - currentID)\r\n    //     .map((latitude)=>{\r\n    //         latitude1.push(latitude)\r\n    //     })\r\n    //     this.state.location\r\n    //     .sort(({ longitude: previousID }, { longitude: currentID }) => previousID - currentID)\r\n    //     .map((longitude)=>{\r\n    //         longitude1.push(longitude)\r\n    //     })\r\n    //     console.log('Current',this.state.currentLocation[0].latitude)\r\n    //     console.log(latitude1[0].latitude,latitude1[3].latitude,longitude1[0].longitude,longitude1[3].longitude)\r\n    //     if (latitude1[0].latitude>0&&latitude1[3].latitude<1000) {\r\n    //         alert('complete')\r\n    //     }else{\r\n    //         alert('faild')\r\n    //     }\r\n    // }else{\r\n    //     alert('Please add location')\r\n    // }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Latitude</h1>\r\n                <h1>Longitude</h1>\r\n                <form onSubmit={this.add}>\r\n                    <label>\r\n                    <input type=\"number\" name=\"latitude\" />\r\n                    </label>\r\n                    <label>\r\n                    <input type=\"number\" name=\"longitude\" />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n                {this.state.location.map((item) => (\r\n                    <Location latitude={item.latitude} longitude={item.longitude} key={item.id} click={()=>this.delete(item.id)}/>\r\n                ))}\r\n                <button onClick={()=>this.getLocation()}>\r\n                    Getlocation\r\n                </button>\r\n                {this.state.currentLocation.map((item) => (\r\n                    <Location latitude={item.latitude} longitude={item.longitude} key={item.id} click={()=>this.delete(item.id)}/>\r\n                ))}\r\n                <button onClick={()=>this.checklocation()}>\r\n                    Check-Location\r\n                </button>\r\n                {/* <h2>{this.state.currentLocation[0].latitude}{this.state.currentLocation[0].longitude}</h2> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}